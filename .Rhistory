library(data.table)
data.table(data)
## missing data
mis.mat = NULL
for(j in 1:dim(data)[2]){ if(j==11) break; mis.mat = rbind(mis.mat,data[data[,j]=="?",]) }
dim(mis.mat);
names(data)
cbind(data$name,data$sibsp,data$parch)
data$name
## data cleansing
dim(data)
str(data)
data$ticket = as.factor(data$ticket)
levels(data$ticket) = c(1:703)
data$pclass = as.factor(data$pclass)
## data cleansing
dim(data)
rm(list=ls())
data = read.csv("C:/Users/HSMOON/Desktop/mygit/data-mining/titan.tr.csv",header=T)
# data = read.csv("C:/Users/HSMOON/Desktop/seminar/analysis/Titanic/kaggle data/train.csv",header=T)
dim(data); names(data); summary(data); str(data)
rm(list=ls())
data = read.csv("C:/Users/HSMOON/Desktop/mygit/data-mining/titan.tr.csv",header=T)
data = read.csv("C:/Users/HSMOON/Desktop/mygit/data-mining/titanic/titan.tr.csv",header=T)
rm(list=ls())
data = read.csv("C:/Users/HSMOON/Desktop/mygit/data-mining/titanic/titan.tr.csv",header=T)
## imputation
# "age" : mean
mdata =  data[data[,"age"]=="?",]
dim(mdata)
names(data)
## data cleansing
dim(data)
str(data)
data$ticket = as.factor(data$ticket)
levels(data$ticket) = c(1:703)
data$pclass = as.factor(data$pclass)
data$sex = as.factor(data$sex)
levels(data$sex) = 1:2
data$age = as.numeric(data$age)
data$sibsp = as.factor(data$sibsp)
data$sibsp
data$parch = as.factor(data$parch)
data$fare = as.numeric(data$fare)
str(data)
data$ticket
tf.mat = cbind(data$ticket,data$fare,data$pclass,data$sibsp,data$parch,data$embarked)
colnames(tf.mat) = c("ticket","fare","pclass","sibsp","parch","embarked")
data$sibsp == tf.mat[,4]
data$sibsp
tf.mat[,4]
tf.mat[,"sibsp"]
tf.mat
tf.mat = cbind(data$ticket,data$fare,data$pclass,data$sibsp,data$parch,data$embarked)
data$embarked = as.factor(data$embarked)
tf.mat = cbind(data$ticket,data$fare,data$pclass,data$sibsp,data$parch,data$embarked)
tf.mat
data[data$sibsp==0,]
tf.mat[,4]
data$sibsp == tf.mat[,4]
data$sibsp
tf.mat = cbind(data$ticket,data$fare,data$pclass,data$sibsp,data$parch,data$embarked)
tf.mat
tf.mat[,4]
data$sibsp
tf.mat[,4]
length(tf.mat[,4])
length(data$si)
length(data$sibsp)
tf.mat[,4]
tf.mat
is.factor(tf.mat[,4])
str(data)
tf.mat = cbind(as.factor(data$ticket),as.numeric(data$fare),as.factor(data$pclass),as.factor(data$sibsp),
as.factor(data$parch),as.factor(data$embarked))
is.factor(tf.mat[,4])
tf.mat = cbind(as.factor(data$ticket),as.numeric(data$fare),as.factor(data$pclass),as.factor(data$sibsp),
as.factor(data$parch),as.factor(data$embarked))
is.factor(tf.mat[,4])
length(tf.mat[,4])
length(data$sibsp)
tf.mat[,4]
data$sibsp
data$sibsp
cbind(data$sibsp)
m=cbind(data$sibsp)
data$sibsp
m=cbind(data$sibsp)
m[,1]
tf.mat = cbind(as.factor(data$ticket),as.numeric(data$fare),as.factor(data$pclass),as.factor(data$sibsp),
as.factor(data$parch),as.factor(data$embarked))
data$sibsp
m=cbind(data$sibsp)
m[,1]
data$sibsp
m=cbind(data$sibsp)
m[,1]
data$sibsp
m=cbind(data$sibsp)
data$sibsp==m
data$sibsp
m
m=cbind(data$sibsp,deparse.level = 0)
m
data$sibsp
m=cbind(data$sibsp,deparse.level = 0)
m
m=cbind(data$sibsp,factor.exclude=T)
m
m=cbind(data$sibsp, stringsAsFactors = default.stringsAsFactors())
m
# 2. Random Forest
library(randomForest)
data(iris)
iris.rf = randomForest(Species~., data=iris)
iris.rf
iris[1:4]
myiris = cbind(iris[1:4], matrix(runif(96*nrow(iris))),nrow(iris),.96)
myiris
iris[1:4]
myiris = cbind(iris[1:4], matrix(runif(96*nrow(iris))),nrow(iris),.96)
myiris
result = rfcv(myiris, iris$Species,cv.fold = 3)
myiris = cbind(iris[1:4], matrix(runif(96*nrow(iris))),nrow(iris),.96)
result = rfcv(myiris, iris$Species,cv.fold = 3)
set.seed(647)
myiris <- cbind(iris[1:4], matrix(runif(96 * nrow(iris)), nrow(iris), 96))
result <- rfcv(myiris, iris$Species, cv.fold=3)
myiris = cbind(iris[1:4], matrix(runif(96*nrow(iris))),nrow(iris),.96)
result = rfcv(myiris, iris$Species,cv.fold = 3)
result = rfcv(myiris, iris$Species, cv.fold = 3)
myiris <- cbind(iris[1:4], matrix(runif(96 * nrow(iris)), nrow(iris), 96))
result <- rfcv(myiris, iris$Species, cv.fold=3)
myiris <- cbind(iris[1:4], matrix(runif(96 * nrow(iris)), nrow(iris), 96))
result = rfcv(myiris, iris$Species, cv.fold = 3)
myiris = cbind(iris[1:4], matrix(runif(96*nrow(iris)),nrow(iris),.96))
myiris = cbind(iris[1:4], matrix(runif(96*nrow(iris)),nrow(iris),.96))
myiris = cbind(iris[1:4], matrix(runif(96 * nrow(iris)),nrow(iris),.96))
myiris <- cbind(iris[1:4], matrix(runif(96 * nrow(iris)), nrow(iris), 96))
myiris = cbind(iris[1:4], matrix(runif(96 * nrow(iris)),nrow(iris),96))
result = rfcv(myiris, iris$Species, cv.fold = 3)
myiris = cbind(iris[1:4], matrix(runif(96 * nrow(iris)), nrow(iris), 96))
result = rfcv(myiris, iris$Species, cv.fold=3)
result
result$n.var
dim(myiris)
result$error.cv
with(result, plot(n.var,error.cv,log="x",type="o",lwd=2))
with(result, plot(n.var,error.cv,log="x",type="o",lwd=2))
sn = sample(1:nrow(iris),size=nrow(iris)*0.7)
train = iris[sn,]
test = iris[-sn.]
test = iris[-sn,]
forest_m = randomForest(Species~., data=train)
data(iris)
data(iris)
set.seed(71)
sn = sample(1:nrow(iris),size=nrow(iris)*0.7)
train = iris[sn,]
test = iris[-sn,]
forest_m = randomForest(Species~., data=train)
# 2. Random Forest
library(randomForest)
s
s
set.seed(71)
sn = sample(1:nrow(iris),size=nrow(iris)*0.7)
train = iris[sn,]
test = iris[-sn,]
forest_m = randomForest(Species~., data=train)
forest_m
forest_m$type
forest_m$err.rate
forest_m$predicted
forest_m$importance
rm(list=ls())
Data = read.csv("C:/Users/HSMOON/Desktop/mygit/data-mining/house-prices/house-prices-advanced-regression-techniques/train.csv",header=T)
## missing data
sum(is.na(Data)); colSums(is.na(Data))
dim(Data);summary(Data)
# remove "Id"
df = Data[,-1]
colSums(is.na(df))
# replace NA->none
## Alley
replace(df$Alley,is.na(df$Alley),'None')->df$Alley
## Basement
replace(df$BsmtQual,is.na(df$BsmtQual),'None')->df$BsmtQual
replace(df$BsmtCond,is.na(df$BsmtCond),'None')->df$BsmtCond
cbind(df$BsmtCond[949],df$BsmtExposure[949])
df$BsmtExposure[949] = "No"
# cbind(which(is.na(df$BsmtFinType1)),which(is.na(df$BsmtFinType2)))
# cbind(df$BsmtFinType1[333],df$BsmtFinType2[333])
replace(df$BsmtExposure,is.na(df$BsmtExposure),'None')->df$BsmtExposure
replace(df$BsmtFinType1,is.na(df$BsmtFinType1),'None')->df$BsmtFinType1
replace(df$BsmtFinType2,is.na(df$BsmtFinType2),'None')->df$BsmtFinType2
## fire
replace(df$FireplaceQu,is.na(df$FireplaceQu),'None')->df$FireplaceQu
## garage
# cbind(which(is.na(df$GarageType)),which(is.na(df$GarageYrBlt)),which(is.na(df$GarageFinish)),which(is.na(df$GarageQual)),which(is.na(df$GarageCond)))
replace(df$GarageType,is.na(df$GarageType),'None')->df$GarageType
replace(df$GarageYrBlt,is.na(df$GarageYrBlt),0)->df$GarageYrBlt
replace(df$GarageFinish,is.na(df$GarageFinish),'None')->df$GarageFinish
replace(df$GarageQual,is.na(df$GarageQual),'None')->df$GarageQual
replace(df$GarageCond,is.na(df$GarageCond),'None')->df$GarageCond
## pool
replace(df$PoolQC,is.na(df$PoolQC),'None')->df$PoolQC
## fence
replace(df$Fence,is.na(df$Fence),'None')->df$Fence
## miscfeature
replace(df$MiscFeature,is.na(df$MiscFeature),'None')->df$MiscFeature
## LotFrontage / MasVnrType / MasVnrArea / Electrical
### MasVnrType : None / MasVnrArea : 0
replace(df$MasVnrType,is.na(df$MasVnrType),'None')->df$MasVnrType
replace(df$MasVnrArea,is.na(df$MasVnrArea),0)->df$MasVnrArea
### Electrical
table(df$Electrical)
df = df[-which(is.na(df$Electrical)),] # remove NA
dim(df)
### LotFrontage
df[is.na(df$LotFrontage),]
plot(density(log(df$LotFrontage),na.rm=T))
summary(log(df$LotFrontage))
replace(df$LotFrontage,is.na(df$LotFrontage),mean(log(df$LotFrontage),na.rm=T))->df$LotFrontage # mean value
# chr : MSSubClass / OverallQual / OverallCond
# int :
# date : YearBuilt / YearRemodAdd / GarageYrBlt / MoSold / YrSold
strDate = cbind(as.numeric(df$YearRemodAdd),as.numeric(df$YearBuilt))
df$year_gap = drop(strDate[,1])-drop(strDate[,2])
df = df[,-c(19,20)]# remove YearBuilt / YearRemodAdd
df = within(df,{
GarageYrBlt_f = character(0)
GarageYrBlt_f[ GarageYrBlt >= 1900 & GarageYrBlt < 1920 ] = "1"
GarageYrBlt_f[ GarageYrBlt >= 1921 & GarageYrBlt < 1940 ] = "2"
GarageYrBlt_f[ GarageYrBlt >= 1941 & GarageYrBlt < 1960 ] = "3"
GarageYrBlt_f[ GarageYrBlt >= 1961 & GarageYrBlt < 1980 ] = "4"
GarageYrBlt_f[ GarageYrBlt >= 1981 & GarageYrBlt < 2000 ] = "5"
GarageYrBlt_f[ GarageYrBlt >= 2001] = "6"
GarageYrBlt_f = factor(GarageYrBlt_f, level = c("1","2","3","4","5","6","None"))})
replace(df$GarageYrBlt_f,is.na(df$GarageYrBlt_f),"None")->df$GarageYrBlt_f # add GarageYrBlt_f
df = df[,-57] # remove GarageYrBlt
# install.packages("tidyr")
# library(tidyr) # merge variable
df = within(df,{
season = character(0)
season[ MoSold >= 1 & MoSold < 4 ] = "sp"
season[ MoSold >= 4 & MoSold < 7 ] = "sm"
season[ MoSold >= 7 & MoSold < 10 ] = "fl"
season[ MoSold >= 10 ] = "wn"
season = factor(season, level = c("sp","sm","fl","wn"))})
df = df[,-73] # remove MoSold8
df$MSSubClass = as.character(df$MSSubClass)
df$OverallQual = as.character(df$OverallQual)
df$OverallCond = as.character(df$OverallCond)
str(df); sum(is.na(df))
## dummy
n.mat = model.matrix(SalePrice~.,data=df)[,-1]
dim(n.mat)
ntree = seq(100,500,by=100)
ntree
n.mat
sn = sample(1:nrow(n.mat),size=nrow(n.mat)*0.7)
sn
idx = sample(1:nrow(n.mat),size=nrow(n.mat)*0.7)
train = iris[idx,]
test = iris[-idx,]
forest_m = randomForest(Species~., data=train)
train = n.mat[idx,]
test = n.mat[-idx,]
names(n.mat)
colnames(n.mat)
idx = sample(1:nrow(n.mat),size=nrow(n.mat)*0.7)
idx = sample(1:nrow(n.mat),size=nrow(n.mat)*0.7)
x.tr = n.mat[idx,]; y.tr = df$SalePrice[idx,]
x.ts = n.mat[-idx,]; y.ts = df$SalePrice[-idx,]
x.tr = n.mat[idx,]; y.tr = df$SalePrice[idx]
x.ts = n.mat[-idx,]; y.ts = df$SalePrice[-idx]
idx = sample(1:nrow(n.mat),size=nrow(n.mat)*0.7)
x.tr = n.mat[idx,]; y.tr = df$SalePrice[idx]
x.ts = n.mat[-idx,]; y.ts = df$SalePrice[-idx]
tr.mat = cbind(y.tr,x.tr); ts.mat = cbind(x.ts,y.ts)
forest_m = randomForest(y.tr~., data=tr.mat)
dim(tr.mat)
dim(ts.mat)
colnames(tr.mat)
forest_m = randomForest(y.tr~., data=tr.mat)
dim(df)
idx = sample(1:nrow(n.mat),size=nrow(n.mat)*0.7)
x.tr = n.mat[idx,]; y.tr = df$SalePrice[idx]
x.ts = n.mat[-idx,]; y.ts = df$SalePrice[-idx]
tr.mat = cbind(y.tr,x.tr); ts.mat = cbind(x.ts,y.ts)
tr.mat = cbind(SalePrice = y.tr,x.tr); ts.mat = cbind(x.ts,y.ts)
colnames(tr.mat)
head(tr.mat)
scale(df$SalePrice)
forest_m = randomForest(SalePrice~., data=tr.mat)
forest_m = randomForest(SalePrice~., data=tr.mat)
forest_m = randomForest(SalePrice~., data=df)
n.mat
tr.mat = df[idx,]; ts.mat = df[-idx,]
forest_m = randomForest(SalePrice~., data=tr.mat)
# svm
library(e1071)
forest_m
forest_m$err.rate
forest_m$mse
fm = randomForest(SalePrice~.,data=tr.mat)
fm
x.tr = n.mat[idx,]; y.tr = df$SalePrice[idx]
x.tr
predict.randomForest(forest_m,newdata=ts.mat,type="response")
predict(forest_m,newdata=ts.mat,type="response")
pval = predict(forest_m,newdata=ts.mat,type="response")
fm = randomForest(SalePrice~.,ntree=100, data=tr.mat)
fm
fm = randomForest(SalePrice~.,ntree=i, data=tr.mat)
pval = predict(forest_m,newdata=ts.mat,type="response")
ts.mat
tr.mat = df[idx,]; ts.mat = df[-idx,]
ts.mat
mes = mean((pval-ts.mat$SalePrice)^2)
mes
ntree = seq(100,500,by=100)
m.vec = NULL
for(n in ntree){
fm = randomForest(SalePrice~.,ntree=i, data=tr.mat)
pval = predict(forest_m,newdata=ts.mat,type="response")
m.vec = c(m.vec,mean((pval-ts.mat$SalePrice)^2))s
}
for(n in ntree){
fm = randomForest(SalePrice~.,ntree=n, data=tr.mat)
pval = predict(forest_m,newdata=ts.mat,type="response")
m.vec = c(m.vec,mean((pval-ts.mat$SalePrice)^2))
}
m.vec
ntree
fm = randomForest(SalePrice~.,ntree=n, data=tr.mat)
pval = predict(forest_m,newdata=ts.mat,type="response")
m.vec = NULL
n = ntree[1]
n
fm = randomForest(SalePrice~.,ntree=n, data=tr.mat)
pval = predict(forest_m,newdata=ts.mat,type="response")
m.vec = c(m.vec,mean((pval-ts.mat$SalePrice)^2))
n = ntree[2]
n
fm = randomForest(SalePrice~.,ntree=n, data=tr.mat)
pval = predict(forest_m,newdata=ts.mat,type="response")
m.vec = c(m.vec,mean((pval-ts.mat$SalePrice)^2))
m.vec
fm = randomForest(SalePrice~.,ntree=1000, data=tr.mat)
pval = predict(forest_m,newdata=ts.mat,type="response")
m.vec = c(m.vec,mean((pval-ts.mat$SalePrice)^2))
m.vec
for(n in ntree){
fm = randomForest(SalePrice~.,ntree=n, data=tr.mat)
pval = predict(fm,newdata=ts.mat,type="response")
m.vec = c(m.vec,mean((pval-ts.mat$SalePrice)^2))
}
m.vec
m.vec = NULL
m.vec = NULL
for(n in ntree){
fm = randomForest(SalePrice~.,ntree=n, data=tr.mat)
pval = predict(fm,newdata=ts.mat,type="response")
m.vec = c(m.vec,mean((pval-ts.mat$SalePrice)^2))
}
m.vec
ntree = seq(100,700,by=100)
m.vec = NULL
for(n in ntree){
fm = randomForest(SalePrice~.,ntree=n, data=tr.mat)
pval = predict(fm,newdata=ts.mat,type="response")
m.vec = c(m.vec,mean((pval-ts.mat$SalePrice)^2))
}
m.vec
which.min(m.vec)
ntree = seq(100,500,by=100)
m.vec
m.vec = NULL
for(n in ntree){
fm = randomForest(SalePrice~.,ntree=n, data=tr.mat)
pval = predict(fm,newdata=ts.mat,type="response")
m.vec = c(m.vec,mean((pval-ts.mat$SalePrice)^2))
}
m.vec
m.vec
fm
importance(fm)
plot(importance(fm))
plot(importance(fm))
boxplot(importance(fm))
for(n in ntree){
fm = randomForest(SalePrice~.,ntree=n, data=tr.mat)
print(fm)
pval = predict(fm,newdata=ts.mat,type="response")
m.vec = c(m.vec,mean((pval-ts.mat$SalePrice)^2))
}
## tuning paramter : ntree, mtry
ntree = seq(100,500,by=100)
m.vec = m.mat = NULL
## tuning paramter : ntree, mtry
ntree = seq(100,500,by=100)
m.vec = m.mat = NULL; fold = 1:5
## tuning paramter : ntree, mtry
ntree = seq(100,500,by=100)
m.vec = m.mat = NULL; fold = 1:5
for(fid in fold){
print(fid)
idx = sample(1:nrow(n.mat),size=nrow(n.mat)*0.7)
tr.mat = df[idx,]; ts.mat = df[-idx,]
for(n in ntree){
fm = randomForest(SalePrice~.,ntree=n,data=tr.mat)
print(fm)
pval = predict(fm,newdata=ts.mat,type="response")
m.vec = c(m.vec,mean((pval-ts.mat$SalePrice)^2))
}
m.mat = rbind(m.mat,m.vec)
}
m.mat
for(fid in fold){
print(fid)
idx = sample(1:nrow(n.mat),size=nrow(n.mat)*0.7)
tr.mat = df[idx,]; ts.mat = df[-idx,]
for(n in ntree){
fm = randomForest(SalePrice~.,ntree=n,data=tr.mat)
# print(fm)
pval = predict(fm,newdata=ts.mat,type="response")
m.vec = c(m.vec,mean((pval-ts.mat$SalePrice)^2))
}
m.mat = rbind(m.mat,m.vec)
}
m.vec
## tuning paramter : ntree, mtry
ntree = seq(100,500,by=100)
m.mat = NULL; fold = 1:5
for(fid in fold){
print(fid)
idx = sample(1:nrow(n.mat),size=nrow(n.mat)*0.7)
tr.mat = df[idx,]; ts.mat = df[-idx,]
m.vec = NULL
for(n in ntree){
fm = randomForest(SalePrice~.,ntree=n,data=tr.mat)
# print(fm)
pval = predict(fm,newdata=ts.mat,type="response")
m.vec = c(m.vec,mean((pval-ts.mat$SalePrice)^2))
}
m.mat = rbind(m.mat,m.vec)
}
m.mat
which.min(m.mat[1])
which.min(m.mat[2])
which.min(m.mat[3])
which.min(m.mat[4])
which.min(m.mat[5])
which.min(m.mat[1,])
which.min(m.mat[2,])
which.min(m.mat[3,])
which.min(m.mat[4,])
which.min(m.mat[5,])
which.min(m.mat[1,])
which.min(m.mat[2,])
which.min(m.mat[3,])
which.min(m.mat[4,])
which.min(m.mat[5,])
## tuning paramter : ntree, mtry
n.fold = 5; fold.id.1 = fold.id.2 = NULL
colMeans(m.mat)
opt = which.min(colMeans(m.mat))
opt
## tuning paramter : ntree, mtry
nt_vec = seq(100,500,by=100)
rf_model = randomForest(SalePrice~., data=df)
nt.vec = seq(100,500,by=100)
m.mat = NULL; fold = 1:5
for(fid in fold){
print(fid)
idx = sample(1:nrow(n.mat),size=nrow(n.mat)*0.7)
tr.mat = df[idx,]; ts.mat = df[-idx,]
m.vec = NULL
for(n in nt.vec){
fm = randomForest(SalePrice~.,ntree=n,data=tr.mat)
# print(fm)
pval = predict(fm,newdata=ts.mat,type="response")
m.vec = c(m.vec,mean((pval-ts.mat$SalePrice)^2))
}
m.mat = rbind(m.mat,m.vec)
}
opt = which.min(colMeans(m.mat))
nt = nt.vec[opt]
rf_model = randomForest(SalePrice~.,ntree=nt,data=df)
# svm
library(e1071)
library(kernlab)
fit = randomForest(SalePrice~., data=n.mat)
cbind(df$SalePrice,n.mat)
cbind(SalePrice=df$SalePrice,n.mat)
dat = cbind(SalePrice=df$SalePrice,n.mat)
fit = randomForest(SalePrice~., data=dat)
colnames(n.mat)
RoofMatlTar&Grv
is.data.frame(n.mat)
n.mat = as.data.frame(n,mat)
n.mat = as.data.frame(n.mat)
is.data.frame(n.mat)
n.mat$RoofMatlTar&Grv
n.mat$`RoofMatlTar&Grv`
fit = randomForest(SalePrice~., data=dat)
attach(n.mat)
fit = randomForest(SalePrice~., data=dat)
fit
fit$call
